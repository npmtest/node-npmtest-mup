{"/home/travis/build/npmtest/node-npmtest-mup/test.js":"/* istanbul instrument in package npmtest_mup */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mup/lib.npmtest_mup.js":"/* istanbul instrument in package npmtest_mup */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_mup = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_mup = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-mup/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-mup && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_mup */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_mup\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_mup.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_mup.rollup.js'] =\n            local.assetsDict['/assets.npmtest_mup.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_mup.__dirname + '/lib.npmtest_mup.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mup/node_modules/mup/lib/index.js":"'use strict';\n\nvar _mupApi = require('./mup-api');\n\nvar _mupApi2 = _interopRequireDefault(_mupApi);\n\nvar _updates = require('./updates');\n\nvar _updates2 = _interopRequireDefault(_updates);\n\nvar _modules = require('./modules/');\n\nvar _modules2 = _interopRequireDefault(_modules);\n\nvar _package = require('../package.json');\n\nvar _package2 = _interopRequireDefault(_package);\n\nvar _commander = require('commander');\n\nvar _commander2 = _interopRequireDefault(_commander);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar settingsPath = void 0;\nvar configPath = void 0;\nvar args = process.argv.slice(2);\n\n_commander2.default.arguments('<command> [subcommand]').version(_package2.default.version).action(argAction).option('--settings <filePath>', 'Meteor settings file', setSettingsPath).option('--config <filePath>', 'mup.js config file', setConfigPath).option('--verbose', 'Print more output while building and running tasks on server').on('--help', function () {\n  console.log('   Commands:');\n\n  function listModuleCommands(commands) {\n    Object.keys(commands).forEach(function (command) {\n      if (command === 'default') {\n        listModuleCommands(commands['default']);\n        return;\n      }\n      console.log('     ' + command);\n    });\n  }\n\n  listModuleCommands(_modules2.default);\n\n  console.log('');\n  console.log('    For list of subcommands, run ');\n  console.log('      mup <command> help');\n}).parse(process.argv);\n\nif (_commander2.default.args.length === 0) {\n  _commander2.default.help();\n  process.exit(0);\n}\n\nfunction argAction(arg, subarg) {\n  var moduleArg = arg;\n  var command = subarg;\n\n  if (!command && !_modules2.default[moduleArg]) {\n    command = moduleArg;\n    moduleArg = 'default';\n  }\n\n  if (moduleArg === 'default' && command === 'help') {\n    _commander2.default.help();\n    process.exit();\n  }\n\n  var module = void 0;\n\n  if (_modules2.default[moduleArg]) {\n    module = _modules2.default[moduleArg];\n  } else {\n    console.error('No such module ' + moduleArg);\n    _commander2.default.help();\n    process.exit(1);\n  }\n\n  if (!command) {\n    if (moduleArg === 'default') {\n      _commander2.default.help();\n    } else {\n      module.help(args);\n    }\n    process.exit(0);\n  }\n\n  if (!module[command]) {\n    console.error('error: unknown command %s', command);\n    if (moduleArg === 'default') {\n      _commander2.default.help();\n      process.exit(1);\n    }\n\n    module.help(args);\n    process.exit(1);\n  }\n\n  if (_commander2.default.settings) {\n    var settingsIndex = argIndex(args, '--settings');\n\n    if (args[settingsIndex].indexOf('--settings=') === 0) {\n      args.splice(settingsIndex, 1);\n    } else {\n      args.splice(settingsIndex, 2);\n    }\n  }\n\n  if (_commander2.default.config) {\n    var configIndex = argIndex(args, '--config');\n\n    if (args[configIndex].indexOf('--config=') === 0) {\n      args.splice(configIndex, 1);\n    } else {\n      args.splice(configIndex, 2);\n    }\n  }\n\n  (0, _updates2.default)().then(function () {\n    var base = process.cwd();\n    var api = new _mupApi2.default(base, args, configPath, settingsPath, _commander2.default.verbose);\n    var potentialPromise = module[command](api);\n    if (potentialPromise && typeof potentialPromise.then === 'function') {\n      potentialPromise.catch(function (e) {\n        if (e.nodemiralHistory instanceof Array) {\n          // Error is from nodemiral when running a task list\n          // Nodemiral already displayed the error to the user\n          return;\n        }\n\n        console.log(e);\n      });\n    }\n  });\n}\n\nfunction argIndex(list, string) {\n  for (var i = 0; i < list.length; i++) {\n    if (list[i].indexOf(string) === 0) {\n      return i;\n    }\n  }\n  return -1;\n}\n\nfunction handleErrors(e) {\n  console.log(e.name, e.message);\n  process.exit(1);\n}\n\nfunction setSettingsPath(settingsPathArg) {\n  settingsPath = settingsPathArg;\n}\n\nfunction setConfigPath(configPathArg) {\n  configPath = configPathArg;\n}\n\nprocess.on('uncaughtException', handleErrors);","/home/travis/build/npmtest/node-npmtest-mup/node_modules/mup/lib/mup-api.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _chalk = require('chalk');\n\nvar _chalk2 = _interopRequireDefault(_chalk);\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nvar _nodemiral = require('nodemiral');\n\nvar _nodemiral2 = _interopRequireDefault(_nodemiral);\n\nvar _parseJson = require('parse-json');\n\nvar _parseJson2 = _interopRequireDefault(_parseJson);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _utils = require('./modules/utils');\n\nvar _index = require('./validate/index');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar MupAPI = function () {\n  function MupAPI(base, args, configPath, settingsPath, verbose) {\n    _classCallCheck(this, MupAPI);\n\n    this.base = base;\n    this.args = args;\n    this.config = null;\n    this.settings = null;\n    this.sessions = null;\n    this.configPath = configPath;\n    this.settingsPath = settingsPath;\n    this.verbose = verbose;\n  }\n\n  _createClass(MupAPI, [{\n    key: 'getArgs',\n    value: function getArgs() {\n      return this.args;\n    }\n  }, {\n    key: 'optionEnabled',\n    value: function optionEnabled(long) {\n      return this.args.indexOf('--' + long) > -1;\n    }\n  }, {\n    key: 'getBasePath',\n    value: function getBasePath() {\n      return this.base;\n    }\n  }, {\n    key: 'getVerbose',\n    value: function getVerbose() {\n      return this.verbose;\n    }\n  }, {\n    key: 'validateConfig',\n    value: function validateConfig(configPath) {\n      var problems = (0, _index2.default)(this.config);\n\n      if (problems.length > 0) {\n        var red = _chalk2.default.red;\n        var plural = problems.length > 1 ? 's' : 's';\n\n        console.log('loaded mup.js from ' + configPath);\n        console.log('');\n        console.log(red(problems.length + ' Validation Error' + plural));\n\n        problems.forEach(function (problem) {\n          console.log(red('  - ' + problem));\n        });\n\n        console.log('');\n        console.log('If you think there is a bug in the mup.js validator, please');\n        console.log('create an issue at https://github.com/zodern/meteor-up');\n        console.log('');\n      }\n    }\n  }, {\n    key: 'getConfig',\n    value: function getConfig() {\n      if (!this.config) {\n        var filePath = void 0;\n        if (this.configPath) {\n          filePath = (0, _utils.resolvePath)(this.configPath);\n          this.base = _path2.default.dirname(this.configPath);\n        } else {\n          filePath = _path2.default.join(this.base, 'mup.js');\n        }\n        try {\n          this.config = require(filePath); // eslint-disable-line global-require\n        } catch (e) {\n          if (e.code === 'MODULE_NOT_FOUND') {\n            console.error('\"mup.js\" file not found. Run \"mup init\" first.');\n          } else {\n            console.error(e);\n          }\n          process.exit(1);\n        }\n        this.validateConfig(filePath);\n      }\n\n      return this.config;\n    }\n  }, {\n    key: 'getSettings',\n    value: function getSettings() {\n      if (!this.settings) {\n        var filePath = void 0;\n        if (this.settingsPath) {\n          filePath = (0, _utils.resolvePath)(this.settingsPath);\n        } else {\n          filePath = _path2.default.join(this.base, 'settings.json');\n        }\n\n        try {\n          this.settings = _fs2.default.readFileSync(filePath).toString();\n        } catch (e) {\n          console.log('Unable to load settings.json at ' + filePath);\n          if (e.code !== 'ENOENT') {\n            console.log(e);\n          }\n          process.exit(1);\n        }\n        try {\n          this.settings = (0, _parseJson2.default)(this.settings);\n        } catch (e) {\n          console.log('Error parsing settings file:');\n          console.log(e.message);\n          process.exit(1);\n        }\n      }\n\n      return this.settings;\n    }\n  }, {\n    key: 'getSessions',\n    value: function getSessions() {\n      var modules = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      var sessions = this._pickSessions(modules);\n      return Object.keys(sessions).map(function (name) {\n        return sessions[name];\n      });\n    }\n  }, {\n    key: 'withSessions',\n    value: function withSessions() {\n      var modules = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      var api = Object.create(this);\n      api.sessions = this._pickSessions(modules);\n      return api;\n    }\n  }, {\n    key: '_pickSessions',\n    value: function _pickSessions() {\n      var _this = this;\n\n      var modules = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      if (!this.sessions) {\n        this._loadSessions();\n      }\n\n      var sessions = {};\n\n      modules.forEach(function (moduleName) {\n        var moduleConfig = _this.config[moduleName];\n        if (!moduleConfig) {\n          return;\n        }\n\n        for (var name in moduleConfig.servers) {\n          if (!moduleConfig.servers.hasOwnProperty(name)) {\n            continue;\n          }\n\n          if (_this.sessions[name]) {\n            sessions[name] = _this.sessions[name];\n          }\n        }\n      });\n\n      return sessions;\n    }\n  }, {\n    key: '_loadSessions',\n    value: function _loadSessions() {\n      var config = this.getConfig();\n      this.sessions = {};\n\n      // `mup.servers` contains login information for servers\n      // Use this information to create nodemiral sessions.\n      for (var name in config.servers) {\n        if (!config.servers.hasOwnProperty(name)) {\n          continue;\n        }\n\n        var info = config.servers[name];\n        var auth = {\n          username: info.username\n        };\n        var opts = {\n          ssh: {}\n        };\n\n        var sshAgent = process.env.SSH_AUTH_SOCK;\n\n        if (info.opts) {\n          opts.ssh = info.opts;\n        }\n\n        if (info.pem) {\n          try {\n            auth.pem = _fs2.default.readFileSync((0, _utils.resolvePath)(info.pem), 'utf8');\n          } catch (e) {\n            console.error('Unable to load pem at \"' + (0, _utils.resolvePath)(info.pem) + '\"');\n            console.error('for server \"' + name + '\"');\n            if (e.code !== 'ENOENT') {\n              console.log(e);\n            }\n            process.exit(1);\n          }\n        } else if (info.password) {\n          auth.password = info.password;\n        } else if (sshAgent && _fs2.default.existsSync(sshAgent)) {\n          opts.ssh.agent = sshAgent;\n        } else {\n          console.error('error: server %s doesn\\'t have password, ssh-agent or pem', name);\n          process.exit(1);\n        }\n\n        var session = _nodemiral2.default.session(info.host, auth, opts);\n        this.sessions[name] = session;\n      }\n    }\n  }]);\n\n  return MupAPI;\n}();\n\nexports.default = MupAPI;","/home/travis/build/npmtest/node-npmtest-mup/node_modules/mup/lib/modules/utils.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.runTaskList = runTaskList;\nexports.getDockerLogs = getDockerLogs;\nexports.runSSHCommand = runSSHCommand;\nexports.countOccurences = countOccurences;\nexports.resolvePath = resolvePath;\n\nvar _underscore = require('underscore');\n\nvar _ = _interopRequireWildcard(_underscore);\n\nvar _ssh = require('ssh2');\n\nvar _debug = require('debug');\n\nvar _debug2 = _interopRequireDefault(_debug);\n\nvar _expandTilde = require('expand-tilde');\n\nvar _expandTilde2 = _interopRequireDefault(_expandTilde);\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nvar _path2 = require('path');\n\nvar _path3 = _interopRequireDefault(_path2);\n\nvar _bluebird = require('bluebird');\n\nvar _stream = require('stream');\n\nvar _stream2 = _interopRequireDefault(_stream);\n\nvar _readline = require('readline');\n\nvar _readline2 = _interopRequireDefault(_readline);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar log = (0, _debug2.default)('mup:utils');\n\nfunction addStdioHandlers(list) {\n  list._taskQueue = list._taskQueue.map(function (task) {\n    task.options.onStdout = function () {\n      return function (data) {\n        process.stdout.write(data);\n      };\n    };\n    task.options.onStderr = function () {\n      return function (data) {\n        process.stderr.write(data);\n      };\n    };\n    return task;\n  });\n}\n\nfunction runTaskList(list, sessions, opts) {\n  if (opts && opts.verbose) {\n    addStdioHandlers(list);\n    delete opts.verbose;\n  }\n  return new Promise(function (resolve, reject) {\n    list.run(sessions, opts, function (summaryMap) {\n      for (var host in summaryMap) {\n        if (summaryMap.hasOwnProperty(host)) {\n          var summary = summaryMap[host];\n          if (summary.error) {\n            var error = summary.error;\n            error.nodemiralHistory = summary.history;\n            reject(error);\n\n            return;\n          }\n        }\n      }\n\n      resolve();\n    });\n  });\n}\n\n// Implments a simple readable stream to pass\n// the logs from nodemiral to readline which\n// then splits it into individual lines.\n\nvar Callback2Stream = function (_stream$Readable) {\n  _inherits(Callback2Stream, _stream$Readable);\n\n  function Callback2Stream(options) {\n    _classCallCheck(this, Callback2Stream);\n\n    var _this = _possibleConstructorReturn(this, (Callback2Stream.__proto__ || Object.getPrototypeOf(Callback2Stream)).call(this, options));\n    // Calls the stream.Readable(options) constructor\n\n\n    _this.data = [];\n    return _this;\n  }\n\n  _createClass(Callback2Stream, [{\n    key: 'addData',\n    value: function addData(data) {\n      if (this.reading) {\n        this.reading = this.push(data);\n      } else {\n        this.data.push(data);\n      }\n    }\n  }, {\n    key: '_read',\n    value: function _read() {\n      var _this2 = this;\n\n      this.reading = true;\n      this.data.forEach(function () {\n        var shouldContinue = _this2.reading && _this2.push(_this2.data.shift());\n        if (!shouldContinue) {\n          _this2.reading = false;\n        }\n      });\n    }\n  }]);\n\n  return Callback2Stream;\n}(_stream2.default.Readable);\n\nfunction getDockerLogs(name, sessions, args) {\n  var command = 'sudo docker ' + args.join(' ') + ' ' + name + ' 2>&1';\n\n  log('getDockerLogs command: ' + command);\n\n  var promises = _.map(sessions, function (session) {\n    var input = new Callback2Stream();\n    var host = '[' + session._host + ']';\n    var lineSeperator = _readline2.default.createInterface({\n      input: input,\n      terminal: true\n    });\n    lineSeperator.on('line', function (data) {\n      console.log(host + data);\n    });\n    var options = {\n      onStdout: function onStdout(data) {\n        input.addData(data);\n      },\n      onStderr: function onStderr(data) {\n        // the logs all come in on stdout so stderr isn't added to lineSeperator\n        process.stdout.write(host + data);\n      }\n    };\n    return (0, _bluebird.promisify)(session.execute.bind(session))(command, options);\n  });\n  return Promise.all(promises);\n}\n\n// Maybe we should create a new npm package\n// for this one. Something like 'sshelljs'.\nfunction runSSHCommand(info, command) {\n  return new Promise(function (resolve, reject) {\n    var conn = new _ssh.Client();\n\n    // TODO better if we can extract SSH agent info from original session\n    var sshAgent = process.env.SSH_AUTH_SOCK;\n    var ssh = {\n      host: info.host,\n      port: info.opts && info.opts.port || 22,\n      username: info.username\n    };\n\n    if (info.pem) {\n      ssh.privateKey = _fs2.default.readFileSync(resolvePath(info.pem), 'utf8');\n    } else if (info.password) {\n      ssh.password = info.password;\n    } else if (sshAgent && _fs2.default.existsSync(sshAgent)) {\n      ssh.agent = sshAgent;\n    }\n    conn.connect(ssh);\n\n    conn.once('error', function (err) {\n      if (err) {\n        reject(err);\n      }\n    });\n\n    // TODO handle error events\n    conn.once('ready', function () {\n      conn.exec(command, function (err, outputStream) {\n        if (err) {\n          conn.end();\n          reject(err);\n          return;\n        }\n\n        var output = '';\n\n        outputStream.on('data', function (data) {\n          output += data;\n        });\n\n        outputStream.once('close', function (code) {\n          conn.end();\n          resolve({ code: code, output: output });\n        });\n      });\n    });\n  });\n}\n\nfunction countOccurences(needle, haystack) {\n  var regex = new RegExp(needle, 'g');\n  var match = haystack.match(regex) || [];\n  return match.length;\n}\n\nfunction resolvePath() {\n  for (var _len = arguments.length, paths = Array(_len), _key = 0; _key < _len; _key++) {\n    paths[_key] = arguments[_key];\n  }\n\n  var expandedPaths = paths.map(function (_path) {\n    return (0, _expandTilde2.default)(_path);\n  });\n  return _path3.default.resolve.apply(_path3.default, _toConsumableArray(expandedPaths));\n}","/home/travis/build/npmtest/node-npmtest-mup/node_modules/mup/lib/validate/index.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = validate;\n\nvar _utils = require('./utils');\n\nvar _joi = require('joi');\n\nvar _joi2 = _interopRequireDefault(_joi);\n\nvar _meteor = require('./meteor');\n\nvar _meteor2 = _interopRequireDefault(_meteor);\n\nvar _mongo = require('./mongo');\n\nvar _mongo2 = _interopRequireDefault(_mongo);\n\nvar _servers = require('./servers');\n\nvar _servers2 = _interopRequireDefault(_servers);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar schema = _joi2.default.object().keys({\n  servers: _joi2.default.object().required(),\n  meteor: _joi2.default.object(),\n  mongo: _joi2.default.object()\n});\n\nfunction validateAll(config) {\n  var details = [];\n  var results = void 0;\n\n  results = _joi2.default.validate(config, schema, _utils.VALIDATE_OPTIONS);\n  details = (0, _utils.combineErrorDetails)(details, results);\n\n  if (config.servers) {\n    results = (0, _servers2.default)(config.servers);\n    details = (0, _utils.combineErrorDetails)(details, results);\n  }\n\n  if (config.mongo) {\n    results = (0, _mongo2.default)(config);\n    details = (0, _utils.combineErrorDetails)(details, results);\n  }\n\n  if (config.meteor) {\n    results = (0, _meteor2.default)(config);\n    details = (0, _utils.combineErrorDetails)(details, results);\n  }\n\n  return details.map(_utils.improveErrors);\n}\n\nfunction validate(config) {\n  var errors = validateAll(config);\n  return errors.map(function (error) {\n    return error.message;\n  });\n}","/home/travis/build/npmtest/node-npmtest-mup/node_modules/mup/lib/validate/utils.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.improveErrors = improveErrors;\nexports.addLocation = addLocation;\nexports.combineErrorDetails = combineErrorDetails;\nexports.serversExist = serversExist;\nvar VALIDATE_OPTIONS = exports.VALIDATE_OPTIONS = {\n  abortEarly: false,\n  convert: false\n};\n\nfunction improveErrors(error) {\n  // Todo: we can configure the joi messages instead of this\n  if (error.type === 'object.allowUnknown') {\n    error.message = error.message.replace(' is not allowed', ' is an unknown property');\n  } else if (error.type === 'object.without') {\n    error.message = error.message.replace(' conflict with forbidden peer ', ' and ') + ' cannot both be defined';\n  } else if (error.type === 'object.min') {\n    error.message = error.message.replace('.value', '');\n  }\n\n  return error;\n}\n\nfunction addLocation(details, location) {\n  return details.map(function (detail) {\n    // removes property name from message since it is\n    // already part of detail.path\n    detail.message = detail.message.replace(/^\".*?\"\\s+/, '');\n\n    detail.message = '\"' + location + '.' + detail.path + '\" ' + detail.message;\n    return detail;\n  });\n}\n\nfunction combineErrorDetails(details, results) {\n\n  if (results instanceof Array) {\n    return details.concat(results);\n  }\n\n  var additionalDetails = results.error ? results.error.details : [];\n\n  return details.concat(additionalDetails);\n}\n\nfunction serversExist(serversConfig, serversUsed) {\n  var messages = [];\n  var servers = Object.keys(serversConfig);\n  var using = Object.keys(serversUsed);\n  using.forEach(function (key) {\n    if (servers.indexOf(key) === -1) {\n      messages.push({\n        message: 'Server \"' + key + '\" doesn\\'t exist'\n      });\n    }\n  });\n\n  return messages;\n}","/home/travis/build/npmtest/node-npmtest-mup/node_modules/mup/lib/validate/meteor.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (config) {\n  var details = [];\n  details = (0, _utils.combineErrorDetails)(details, _joi2.default.validate(config.meteor, schema, _utils.VALIDATE_OPTIONS));\n  if (config.meteor.name.indexOf(' ') > -1) {\n    details.push({\n      message: '\"name\" has a space'\n    });\n  }\n  details = (0, _utils.combineErrorDetails)(details, (0, _utils.serversExist)(config.servers, config.meteor.servers));\n\n  return (0, _utils.addLocation)(details, 'meteor');\n};\n\nvar _utils = require('./utils');\n\nvar _joi = require('joi');\n\nvar _joi2 = _interopRequireDefault(_joi);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar schema = _joi2.default.object().keys({\n  name: _joi2.default.string().min(1).required(),\n  path: _joi2.default.string().min(1).required(),\n  port: _joi2.default.number(),\n  servers: _joi2.default.object().required(),\n  deployCheckWaitTime: _joi2.default.number(),\n  deployCheckPort: _joi2.default.number(),\n  enableUploadProgressBar: _joi2.default.bool(),\n  dockerImage: _joi2.default.string(),\n  docker: _joi2.default.object().keys({\n    image: _joi2.default.string().trim(),\n    imageFrontendServer: _joi2.default.string(),\n    args: _joi2.default.array().items(_joi2.default.string().label('docker.args array items')),\n    bind: _joi2.default.string().trim(),\n    networks: _joi2.default.array().items(_joi2.default.string().label('docker.networks array items'))\n  }),\n  buildOptions: _joi2.default.object().keys({\n    serverOnly: _joi2.default.bool(),\n    debug: _joi2.default.bool(),\n    cleanAfterBuild: _joi2.default.bool(),\n    buildLocation: _joi2.default.string(),\n    mobileSettings: _joi2.default.object(),\n    server: _joi2.default.string().uri(),\n    allowIncompatibleUpdates: _joi2.default.boolean(),\n    executable: _joi2.default.string()\n  }),\n  env: _joi2.default.object().keys({\n    ROOT_URL: _joi2.default.string().regex(new RegExp('^(http|https)://', 'i'), 'valid url with \"http://\" or \"https://\"').required(),\n    MONGO_URL: _joi2.default.string()\n  }).pattern(/[\\s\\S]*/, [_joi2.default.string(), _joi2.default.number()]),\n  log: _joi2.default.object().keys({\n    driver: _joi2.default.string(),\n    opts: _joi2.default.object()\n  }),\n  volumes: _joi2.default.object(),\n  nginx: _joi2.default.object().keys({\n    clientUploadLimit: _joi2.default.string().trim()\n  }),\n  ssl: _joi2.default.object().keys({\n    autogenerate: _joi2.default.object().keys({\n      email: _joi2.default.string().email().required(),\n      domains: _joi2.default.string().required()\n    }).label('autogenerate'),\n    crt: _joi2.default.string().trim(),\n    key: _joi2.default.string().trim(),\n    port: _joi2.default.number(),\n    upload: _joi2.default.boolean()\n  }).and('crt', 'key').without('autogenerate', ['crt', 'key']).or('crt', 'autogenerate')\n});","/home/travis/build/npmtest/node-npmtest-mup/node_modules/mup/lib/validate/mongo.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (config) {\n  var details = [];\n  var validationErrors = _joi2.default.validate(config.mongo, schema, _utils.VALIDATE_OPTIONS);\n  details = (0, _utils.combineErrorDetails)(details, validationErrors);\n  details = (0, _utils.combineErrorDetails)(details, (0, _utils.serversExist)(config.servers, config.mongo.servers));\n  return (0, _utils.addLocation)(details, 'mongo');\n};\n\nvar _utils = require('./utils');\n\nvar _joi = require('joi');\n\nvar _joi2 = _interopRequireDefault(_joi);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar schema = _joi2.default.object().keys({\n  oplog: _joi2.default.bool(),\n  port: _joi2.default.number(),\n  version: _joi2.default.string(),\n  servers: _joi2.default.object().keys()\n});","/home/travis/build/npmtest/node-npmtest-mup/node_modules/mup/lib/validate/servers.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = validateServers;\n\nvar _utils = require('./utils');\n\nvar _joi = require('joi');\n\nvar _joi2 = _interopRequireDefault(_joi);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// The regexp used matches everything\nvar schema = _joi2.default.object().keys().pattern(/.*/, {\n  host: _joi2.default.alternatives(_joi2.default.string().ip({\n    version: ['ipv4', 'ipv6']\n  }), _joi2.default.string().uri(), _joi2.default.string().trim()).required(),\n  username: _joi2.default.string().required(),\n  pem: _joi2.default.string().trim(),\n  password: _joi2.default.string(),\n  opts: _joi2.default.object().keys({\n    port: _joi2.default.number()\n  })\n}).min(1);\n\nfunction validateServers(servers) {\n  var details = [];\n  var result = _joi2.default.validate(servers, schema, _utils.VALIDATE_OPTIONS);\n  details = (0, _utils.combineErrorDetails)(details, result);\n  return (0, _utils.addLocation)(details, 'servers');\n}","/home/travis/build/npmtest/node-npmtest-mup/node_modules/mup/lib/updates.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function () {\n  return new Promise(function (resolve) {\n    var params = {\n      timeout: 1000,\n      package: _package2.default.name,\n      auth: {}\n    };\n\n    var npm = new _silentNpmRegistryClient2.default();\n    var uri = 'https://registry.npmjs.org/npm';\n    npm.distTags.fetch(uri, params, function (err, res) {\n      if (err) {\n        resolve();\n        return;\n      }\n\n      var npmVersion = res.latest;\n      var local = _package2.default.version.split('.').map(function (n) {\n        return Number(n);\n      });\n      var remote = npmVersion.split('.').map(function (n) {\n        return Number(n);\n      });\n\n      var available = remote[0] > local[0] || remote[0] === local[0] && remote[1] > local[1] || remote[1] === local[1] && remote[2] > local[2];\n\n      if (available) {\n        var text = 'update available ' + _package2.default.version + ' => ' + npmVersion;\n        text += '\\nTo update, run ' + _chalk2.default.green('npm i -g mup');\n        console.log((0, _boxen2.default)(text, {\n          padding: 1,\n          margin: 1,\n          align: 'center',\n          borderColor: 'yellow'\n        }));\n      }\n\n      resolve();\n    });\n  });\n};\n\nvar _silentNpmRegistryClient = require('silent-npm-registry-client');\n\nvar _silentNpmRegistryClient2 = _interopRequireDefault(_silentNpmRegistryClient);\n\nvar _boxen = require('boxen');\n\nvar _boxen2 = _interopRequireDefault(_boxen);\n\nvar _chalk = require('chalk');\n\nvar _chalk2 = _interopRequireDefault(_chalk);\n\nvar _package = require('../package.json');\n\nvar _package2 = _interopRequireDefault(_package);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }","/home/travis/build/npmtest/node-npmtest-mup/node_modules/mup/lib/modules/index.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar modules = {};\nexports.default = modules;\n\n// Load all subdirectories as MUP modules.\n// The directory name is the module name.\n\n_fs2.default.readdirSync(__dirname).filter(isMupModule).forEach(loadModule);\n\nfunction isMupModule(name) {\n  if (name === '__tests__') {\n    return false;\n  }\n\n  var moduleDir = _path2.default.join(__dirname, name);\n  return _fs2.default.statSync(moduleDir).isDirectory();\n}\n\nfunction loadModule(name) {\n  var moduleDir = _path2.default.join(__dirname, name);\n  modules[name] = require(moduleDir); // eslint-disable-line global-require\n}","/home/travis/build/npmtest/node-npmtest-mup/node_modules/mup/lib/modules/default/index.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.deploy = deploy;\nexports.help = help;\nexports.init = init;\nexports.logs = logs;\nexports.reconfig = reconfig;\nexports.restart = restart;\nexports.setup = setup;\nexports.start = start;\nexports.stop = stop;\n\nvar _docker = require('../docker/');\n\nvar docker = _interopRequireWildcard(_docker);\n\nvar _meteor = require('../meteor/');\n\nvar meteor = _interopRequireWildcard(_meteor);\n\nvar _mongo = require('../mongo/');\n\nvar mongo = _interopRequireWildcard(_mongo);\n\nvar _debug = require('debug');\n\nvar _debug2 = _interopRequireDefault(_debug);\n\nvar _utils = require('../utils');\n\nvar _shelljs = require('shelljs');\n\nvar _shelljs2 = _interopRequireDefault(_shelljs);\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nvar log = (0, _debug2.default)('mup:module:default');\n\n_shelljs2.default.config.silent = true;\n\nfunction deploy(api) {\n  log('exec => mup deploy');\n  return meteor.deploy(api);\n}\n\nfunction help() {\n  log('exec => mup help');\n}\nfunction init() {\n  log('exec => mup init');\n\n  var mupJs = (0, _utils.resolvePath)(__dirname, 'template/mup.js.sample');\n  var settinsJson = (0, _utils.resolvePath)(__dirname, 'template/settings.json');\n  var mupJsDst = (0, _utils.resolvePath)(process.cwd(), 'mup.js');\n  var settingsJsonDst = (0, _utils.resolvePath)(process.cwd(), 'settings.json');\n  var mupJsExists = _fs2.default.existsSync(mupJsDst);\n  var settingsJsonExist = _fs2.default.existsSync(settingsJsonDst);\n\n  if (!settingsJsonExist) {\n    _shelljs2.default.cp(settinsJson, settingsJsonDst);\n    console.log('Created settings.json');\n  } else {\n    console.log('Skipping creation of settings.json.');\n    console.log('settings.json already exist at ' + settingsJsonDst + '.');\n  }\n\n  if (!mupJsExists) {\n    _shelljs2.default.cp(mupJs, mupJsDst);\n\n    console.log('Created mup.js');\n    console.log('');\n    console.log('Next Steps:');\n    console.log('');\n    console.log('  Open mup.js and edit the config to meet your needs.');\n    console.log('  Required changes have been marked with a TODO comment.');\n    console.log('');\n    console.log('  Available options can be found in the docs at');\n    console.log('    https://github.com/zodern/meteor-up');\n    console.log('');\n    console.log('  Then run the command:');\n    console.log('    mup setup');\n  } else {\n    console.log('Skipping creation of mup.js');\n    console.log('mup.js already exists at ' + mupJsDst);\n  }\n}\n\nfunction logs(api) {\n  log('exec => mup logs');\n  return meteor.logs(api);\n}\n\nfunction reconfig(api) {\n  log('exec => mup reconfig');\n  return meteor.envconfig(api).then(function () {\n    return meteor.start(api);\n  });\n}\n\nfunction restart(api) {\n  log('exec => mup restart');\n  return meteor.stop(api).then(function () {\n    return meteor.start(api);\n  });\n}\n\nfunction setup(api) {\n  function displayNextSteps() {\n    console.log('');\n    console.log('Next, you should run:');\n    console.log('    mup deploy');\n  }\n\n  log('exec => mup setup');\n  var config = api.getConfig();\n  return docker.setup(api).then(meteor.setup.bind(null, api)).then(function () {\n    if (config.mongo) {\n      return mongo.setup(api);\n    }\n  }).then(function () {\n    if (config.mongo) {\n      return mongo.start(api);\n    }\n  }).then(displayNextSteps);\n}\n\nfunction start(api) {\n  log('exec => mup start');\n  return meteor.start(api);\n}\n\nfunction stop(api) {\n  log('exec => mup stop');\n  return meteor.stop(api);\n}","/home/travis/build/npmtest/node-npmtest-mup/node_modules/mup/lib/modules/docker/index.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.help = help;\nexports.setup = setup;\nexports.restart = restart;\nexports.ps = ps;\n\nvar _debug = require('debug');\n\nvar _debug2 = _interopRequireDefault(_debug);\n\nvar _nodemiral = require('nodemiral');\n\nvar _nodemiral2 = _interopRequireDefault(_nodemiral);\n\nvar _utils = require('../utils');\n\nvar _async = require('async');\n\nvar _chalk = require('chalk');\n\nvar _chalk2 = _interopRequireDefault(_chalk);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar log = (0, _debug2.default)('mup:module:docker');\n\nfunction uniqueSessions(api) {\n  var sessions = api.getSessions(['meteor', 'mongo', 'proxy']);\n  return sessions.reduce(function (prev, curr) {\n    if (prev.map(function (session) {\n      return session._host;\n    }).indexOf(curr._host) === -1) {\n      prev.push(curr);\n    }\n    return prev;\n  }, []);\n}\n\nfunction help() {\n  log('exec => mup docker help');\n}\n\nfunction setup(api) {\n  log('exec => mup docker setup');\n  var list = _nodemiral2.default.taskList('Setup Docker');\n\n  list.executeScript('Setup Docker', {\n    script: (0, _utils.resolvePath)(__dirname, 'assets/docker-setup.sh')\n  });\n\n  var sessions = uniqueSessions(api);\n  return (0, _utils.runTaskList)(list, sessions, { verbose: api.getVerbose() });\n}\n\nfunction restart(api) {\n  var list = _nodemiral2.default.taskList('Restart Docker Daemon');\n\n  list.executeScript('Restart Docker', {\n    script: (0, _utils.resolvePath)(__dirname, 'assets/docker-restart.sh')\n  });\n\n  var sessions = uniqueSessions(api);\n\n  return (0, _utils.runTaskList)(list, sessions, { verbose: api.getVerbose() });\n}\n\nfunction ps(api) {\n  var args = api.getArgs();\n  args.shift();\n  (0, _async.each)(uniqueSessions(api), function (session, cb) {\n    session.execute('sudo docker ' + args.join(' ') + ' 2>&1', function (err, code, logs) {\n      console.log(_chalk2.default.magenta('[' + session._host + ']') + _chalk2.default.blue(' docker ' + args.join(' ')));\n      console.log(logs.stdout);\n      cb();\n    });\n  });\n}","/home/travis/build/npmtest/node-npmtest-mup/node_modules/mup/lib/modules/meteor/index.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.push = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar push = exports.push = function () {\n  var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(api) {\n    var config, appPath, buildOptions, bundlePath, contents, match, buildCached, list, sessions;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            log('exec => mup meteor push');\n            config = api.getConfig().meteor;\n\n            if (!config) {\n              console.error('error: no configs found for meteor');\n              process.exit(1);\n            }\n\n            appPath = (0, _utils.resolvePath)(api.getBasePath(), config.path);\n            buildOptions = config.buildOptions || {};\n\n            buildOptions.buildLocation = buildOptions.buildLocation || tmpBuildPath(appPath);\n\n            bundlePath = (0, _utils.resolvePath)(buildOptions.buildLocation, 'bundle.tar.gz');\n\n            if (api.optionEnabled('cached-build')) {\n              _context.next = 14;\n              break;\n            }\n\n            // Check if using force-ssl package and ssl is not setup.\n            // This is a common problem people encounter when deploying\n            try {\n              contents = _fs2.default.readFileSync((0, _utils.resolvePath)(appPath, '.meteor/versions')).toString();\n              // Looks for \"force-ssl@\" in the begining of a\n              // line or at the start of the file\n\n              match = /(^|\\s)force-ssl@/m;\n\n              if (match.test(contents) && !config.ssl) {\n                console.log('Your app is using the \"force-ssl\" package, but ssl is not setup in your mup config.');\n                console.log('This can cause unexpected redirects.');\n              }\n            } catch (e) {\n              // This is optional functionality and if it fails\n              // it shouldn't prevent building.\n            }\n\n            console.log('Building App Bundle Locally');\n            _context.next = 12;\n            return (0, _build2.default)(appPath, buildOptions, api.getVerbose());\n\n          case 12:\n            _context.next = 18;\n            break;\n\n          case 14:\n            buildCached = _fs2.default.existsSync(bundlePath);\n\n            if (!buildCached) {\n              console.log('Unable to use previous build. It doesn\\'t exist.');\n              console.log('Remove the \"--cached-build\" option and try again.');\n              process.exit(1);\n            }\n            console.log('Skipping build. Using previous build at');\n            console.log('' + buildOptions.buildLocation);\n\n          case 18:\n            list = _nodemiral2.default.taskList('Pushing Meteor App');\n\n\n            list.copy('Pushing Meteor App Bundle to The Server', {\n              src: bundlePath,\n              dest: '/opt/' + config.name + '/tmp/bundle.tar.gz',\n              progressBar: config.enableUploadProgressBar\n            });\n\n            sessions = api.getSessions(['meteor']);\n            return _context.abrupt('return', (0, _utils.runTaskList)(list, sessions, {\n              series: true,\n              verbose: api.getVerbose()\n            }));\n\n          case 22:\n          case 'end':\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  return function push(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexports.help = help;\nexports.logs = logs;\nexports.setup = setup;\nexports.envconfig = envconfig;\nexports.start = start;\nexports.deploy = deploy;\nexports.stop = stop;\n\nvar _underscore = require('underscore');\n\nvar _ = _interopRequireWildcard(_underscore);\n\nvar _utils = require('../utils');\n\nvar _build = require('./build.js');\n\nvar _build2 = _interopRequireDefault(_build);\n\nvar _debug = require('debug');\n\nvar _debug2 = _interopRequireDefault(_debug);\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nvar _nodemiral = require('nodemiral');\n\nvar _nodemiral2 = _interopRequireDefault(_nodemiral);\n\nvar _randomSeed = require('random-seed');\n\nvar _randomSeed2 = _interopRequireDefault(_randomSeed);\n\nvar _uuid = require('uuid');\n\nvar _uuid2 = _interopRequireDefault(_uuid);\n\nvar _os = require('os');\n\nvar _os2 = _interopRequireDefault(_os);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\nvar log = (0, _debug2.default)('mup:module:meteor');\n\nfunction tmpBuildPath(appPath) {\n  var rand = _randomSeed2.default.create(appPath);\n  var uuidNumbers = [];\n  for (var i = 0; i < 16; i++) {\n    uuidNumbers.push(rand(255));\n  }\n  return (0, _utils.resolvePath)(_os2.default.tmpdir(), 'mup-meteor-' + _uuid2.default.v4({ random: uuidNumbers }));\n}\n\nfunction help() {\n  log('exec => mup meteor help');\n  console.log('mup meteor', Object.keys(this));\n}\n\nfunction logs(api) {\n  log('exec => mup meteor logs');\n  var config = api.getConfig().meteor;\n  if (!config) {\n    console.error('error: no configs found for meteor');\n    process.exit(1);\n  }\n\n  var args = api.getArgs();\n  var sessions = api.getSessions(['meteor']);\n  return (0, _utils.getDockerLogs)(config.name, sessions, args);\n}\n\nfunction setup(api) {\n  log('exec => mup meteor setup');\n  var config = api.getConfig().meteor;\n  if (!config) {\n    console.error('error: no configs found for meteor');\n    process.exit(1);\n  }\n\n  var list = _nodemiral2.default.taskList('Setup Meteor');\n\n  list.executeScript('Setup Environment', {\n    script: (0, _utils.resolvePath)(__dirname, 'assets/meteor-setup.sh'),\n    vars: {\n      name: config.name\n    }\n  });\n\n  if (config.ssl && _typeof(config.ssl.autogenerate) !== 'object') {\n    var basePath = api.getBasePath();\n\n    if (config.ssl.upload !== false) {\n      list.executeScript('Cleaning up SSL Certificates', {\n        script: (0, _utils.resolvePath)(__dirname, 'assets/ssl-cleanup.sh'),\n        vars: {\n          name: config.name\n        }\n      });\n      list.copy('Copying SSL Certificate Bundle', {\n        src: (0, _utils.resolvePath)(basePath, config.ssl.crt),\n        dest: '/opt/' + config.name + '/config/bundle.crt'\n      });\n\n      list.copy('Copying SSL Private Key', {\n        src: (0, _utils.resolvePath)(basePath, config.ssl.key),\n        dest: '/opt/' + config.name + '/config/private.key'\n      });\n    }\n\n    list.executeScript('Verifying SSL Configurations', {\n      script: (0, _utils.resolvePath)(__dirname, 'assets/verify-ssl-config.sh'),\n      vars: {\n        name: config.name\n      }\n    });\n  }\n\n  var sessions = api.getSessions(['meteor']);\n\n  return (0, _utils.runTaskList)(list, sessions, { verbose: api.getVerbose() });\n}\n\nfunction envconfig(api) {\n  log('exec => mup meteor envconfig');\n\n  var config = api.getConfig().meteor;\n  var bindAddress = '0.0.0.0';\n\n  if (!config) {\n    console.error('error: no configs found for meteor');\n    process.exit(1);\n  }\n\n  config.log = config.log || {\n    opts: {\n      'max-size': '100m',\n      'max-file': 10\n    }\n  };\n\n  config.nginx = config.nginx || {};\n\n  if (config.docker && config.docker.bind) {\n    bindAddress = config.docker.bind;\n  }\n\n  if (!config.docker) {\n    if (config.dockerImage) {\n      config.docker = {\n        image: config.dockerImage\n      };\n      delete config.dockerImage;\n    } else {\n      config.docker = {\n        image: 'kadirahq/meteord'\n      };\n    }\n  }\n  if (config.dockerImageFrontendServer) {\n    config.docker.imageFrontendServer = config.dockerImageFrontendServer;\n  }\n  if (!config.docker.imageFrontendServer) {\n    config.docker.imageFrontendServer = 'meteorhacks/mup-frontend-server';\n  }\n\n  // If imagePort is not set, go with port 80 which was the traditional\n  // port used by kadirahq/meteord and meteorhacks/meteord\n  config.docker.imagePort = config.docker.imagePort || 80;\n\n  if (config.ssl) {\n    config.ssl.port = config.ssl.port || 443;\n  }\n\n  var list = _nodemiral2.default.taskList('Configuring App');\n  list.copy('Pushing the Startup Script', {\n    src: (0, _utils.resolvePath)(__dirname, 'assets/templates/start.sh'),\n    dest: '/opt/' + config.name + '/config/start.sh',\n    vars: {\n      appName: config.name,\n      useLocalMongo: api.getConfig().mongo ? 1 : 0,\n      port: config.env.PORT || 80,\n      bind: bindAddress,\n      sslConfig: config.ssl,\n      logConfig: config.log,\n      volumes: config.volumes,\n      docker: config.docker,\n      nginxClientUploadLimit: config.nginx.clientUploadLimit || '10M'\n    }\n  });\n\n  var env = _.clone(config.env);\n  env.METEOR_SETTINGS = JSON.stringify(api.getSettings());\n  // sending PORT to the docker container is useless.\n  // It'll run on PORT 80 and we can't override it\n  // Changing the port is done via the start.sh script\n  delete env.PORT;\n\n  list.copy('Sending Environment Variables', {\n    src: (0, _utils.resolvePath)(__dirname, 'assets/templates/env.list'),\n    dest: '/opt/' + config.name + '/config/env.list',\n    vars: {\n      env: env || {},\n      appName: config.name\n    }\n  });\n\n  var sessions = api.getSessions(['meteor']);\n  return (0, _utils.runTaskList)(list, sessions, {\n    series: true,\n    verbose: api.getVerbose()\n  });\n}\n\nfunction start(api) {\n  log('exec => mup meteor start');\n  var config = api.getConfig().meteor;\n  if (!config) {\n    console.error('error: no configs found for meteor');\n    process.exit(1);\n  }\n\n  var list = _nodemiral2.default.taskList('Start Meteor');\n\n  list.executeScript('Start Meteor', {\n    script: (0, _utils.resolvePath)(__dirname, 'assets/meteor-start.sh'),\n    vars: {\n      appName: config.name\n    }\n  });\n\n  list.executeScript('Verifying Deployment', {\n    script: (0, _utils.resolvePath)(__dirname, 'assets/meteor-deploy-check.sh'),\n    vars: {\n      deployCheckWaitTime: config.deployCheckWaitTime || 60,\n      appName: config.name,\n      deployCheckPort: config.deployCheckPort || config.env.PORT || 80\n    }\n  });\n\n  var sessions = api.getSessions(['meteor']);\n  return (0, _utils.runTaskList)(list, sessions, {\n    series: true,\n    verbose: api.getVerbose()\n  });\n}\n\nfunction deploy(api) {\n  log('exec => mup meteor deploy');\n\n  // validate settings and config before starting\n  api.getSettings();\n  var config = api.getConfig().meteor;\n  if (!config) {\n    console.error('error: no configs found for meteor');\n    process.exit(1);\n  }\n\n  return push(api).then(function () {\n    return envconfig(api);\n  }).then(function () {\n    return start(api);\n  });\n}\n\nfunction stop(api) {\n  log('exec => mup meteor stop');\n  var config = api.getConfig().meteor;\n  if (!config) {\n    console.error('error: no configs found for meteor');\n    process.exit(1);\n  }\n\n  var list = _nodemiral2.default.taskList('Stop Meteor');\n\n  list.executeScript('Stop Meteor', {\n    script: (0, _utils.resolvePath)(__dirname, 'assets/meteor-stop.sh'),\n    vars: {\n      appName: config.name\n    }\n  });\n\n  var sessions = api.getSessions(['meteor']);\n  return (0, _utils.runTaskList)(list, sessions, { verbose: api.getVerbose() });\n}","/home/travis/build/npmtest/node-npmtest-mup/node_modules/mup/index.js":"#!/usr/bin/env node\nrequire('babel-polyfill');\nrequire('./lib');\n","/home/travis/build/npmtest/node-npmtest-mup/node_modules/mup/lib/modules/meteor/build.js":"'use strict';\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _utils = require('../utils');\n\nvar spawn = require('child_process').spawn;\nvar archiver = require('archiver');\nvar fs = require('fs');\n\nvar _ = require('underscore');\n\nfunction buildApp(appPath, buildOptions, verbose) {\n  // Check if the folder exists\n  try {\n    fs.statSync((0, _utils.resolvePath)(appPath));\n  } catch (e) {\n    console.log(e);\n    console.log((0, _utils.resolvePath)(appPath) + ' does not exist');\n    process.exit(1);\n  }\n  // Make sure it is a Meteor app\n  try {\n    // checks for release file since there also is a\n    // .meteor folder in the user's home\n    fs.statSync((0, _utils.resolvePath)(appPath, '.meteor/release'));\n  } catch (e) {\n    console.log((0, _utils.resolvePath)(appPath) + ' is not a meteor app');\n    process.exit(1);\n  }\n\n  return new Promise(function (resolve, reject) {\n    var callback = function callback(err) {\n      if (err) {\n        reject(err);\n        return;\n      }\n      resolve();\n    };\n    buildMeteorApp(appPath, buildOptions, verbose, function (code) {\n      if (code === 0) {\n        archiveIt(buildOptions.buildLocation, callback);\n        return;\n      }\n      console.log('\\n=> Build Error. Check the logs printed above.');\n      callback(new Error('build-error'));\n    });\n  });\n}\n\nfunction buildMeteorApp(appPath, buildOptions, verbose, callback) {\n  var executable = buildOptions.executable || 'meteor';\n  var args = ['build', '--directory', buildOptions.buildLocation, '--architecture', 'os.linux.x86_64'];\n\n  if (buildOptions.debug) {\n    args.push('--debug');\n  }\n\n  if (buildOptions.mobileSettings) {\n    args.push('--mobile-settings');\n    args.push(JSON.stringify(buildOptions.mobileSettings));\n  }\n\n  if (buildOptions.serverOnly) {\n    args.push('--server-only');\n  } else if (!buildOptions.mobileSettings) {\n    args.push('--mobile-settings');\n    args.push(appPath + '/settings.json');\n  }\n\n  if (buildOptions.server) {\n    args.push('--server');\n    args.push(buildOptions.server);\n  }\n\n  if (buildOptions.allowIncompatibleUpdate) {\n    args.push('--allow-incompatible-update');\n  }\n\n  var isWin = /^win/.test(process.platform);\n  if (isWin) {\n    // Sometimes cmd.exe not available in the path\n    // See: http://goo.gl/ADmzoD\n    executable = process.env.comspec || 'cmd.exe';\n    args = ['/c', 'meteor'].concat(args);\n  }\n\n  var options = {\n    cwd: appPath,\n    env: _extends({}, process.env, {\n      METEOR_HEADLESS: 1\n    }),\n    stdio: verbose ? 'inherit' : 'pipe'\n  };\n\n  var meteor = spawn(executable, args, options);\n\n  if (!verbose) {\n    meteor.stdout.pipe(process.stdout, { end: false });\n    meteor.stderr.pipe(process.stderr, { end: false });\n  }\n\n  meteor.on('error', function (e) {\n    console.log(options);\n    console.log(e);\n    console.log('This error usually happens when meteor is not installed.');\n  });\n  meteor.on('close', callback);\n}\n\nfunction archiveIt(buildLocation, cb) {\n  var callback = _.once(cb);\n  var bundlePath = (0, _utils.resolvePath)(buildLocation, 'bundle.tar.gz');\n  var sourceDir = (0, _utils.resolvePath)(buildLocation, 'bundle');\n\n  var output = fs.createWriteStream(bundlePath);\n  var archive = archiver('tar', {\n    gzip: true,\n    gzipOptions: {\n      level: 9\n    }\n  });\n\n  archive.pipe(output);\n  output.once('close', callback);\n\n  archive.once('error', function (err) {\n    console.log('=> Archiving failed:', err.message);\n    callback(err);\n  });\n\n  archive.directory(sourceDir, 'bundle').finalize();\n}\n\nmodule.exports = buildApp;","/home/travis/build/npmtest/node-npmtest-mup/node_modules/mup/lib/modules/mongo/index.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.dump = dump;\nexports.help = help;\nexports.logs = logs;\nexports.setup = setup;\nexports.start = start;\nexports.stop = stop;\n\nvar _utils = require('../utils');\n\nvar _debug = require('debug');\n\nvar _debug2 = _interopRequireDefault(_debug);\n\nvar _nodemiral = require('nodemiral');\n\nvar _nodemiral2 = _interopRequireDefault(_nodemiral);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar log = (0, _debug2.default)('mup:module:mongo');\n\nfunction dump() {\n  log('exec => mup mongo dump');\n}\n\nfunction help() {\n  log('exec => mup mongo help');\n}\n\nfunction logs(api) {\n  log('exec => mup mongo logs');\n\n  var args = api.getArgs();\n  var sessions = api.getSessions(['mongo']);\n  args.shift(); // remove mongo from args sent to docker\n  return (0, _utils.getDockerLogs)('mongodb', sessions, args);\n}\n\nfunction setup(api) {\n  log('exec => mup mongo setup');\n\n  if (!api.getConfig().mongo) {\n    // could happen when running \"mup mongo setup\"\n    console.log('Not setting up built-in mongodb since there is no mongo config');\n    return;\n  }\n\n  var mongoSessions = api.getSessions(['mongo']);\n  var meteorSessions = api.getSessions(['meteor']);\n\n  if (meteorSessions.length !== 1) {\n    console.log('To use mup built-in mongodb setup, you should have only one meteor app server. To have more app servers, use an external mongodb setup');\n    return;\n  } else if (mongoSessions[0]._host !== meteorSessions[0]._host) {\n    console.log('To use mup built-in mongodb setup, you should have both meteor app and mongodb on the same server');\n    return;\n  }\n\n  var list = _nodemiral2.default.taskList('Setup Mongo');\n\n  list.executeScript('Setup Environment', {\n    script: (0, _utils.resolvePath)(__dirname, 'assets/mongo-setup.sh')\n  });\n\n  list.copy('Copying mongodb.conf', {\n    src: (0, _utils.resolvePath)(__dirname, 'assets/mongodb.conf'),\n    dest: '/opt/mongodb/mongodb.conf'\n  });\n\n  var sessions = api.getSessions(['mongo']);\n\n  return (0, _utils.runTaskList)(list, sessions, { verbose: api.getVerbose() });\n}\n\nfunction start(api) {\n  log('exec => mup mongo start');\n\n  var mongoSessions = api.getSessions(['mongo']);\n  var meteorSessions = api.getSessions(['meteor']);\n  var config = api.getConfig().mongo;\n\n  if (meteorSessions.length !== 1 || mongoSessions[0]._host !== meteorSessions[0]._host) {\n    log('Skipping mongodb start. Incompatible config');\n    return;\n  }\n\n  var list = _nodemiral2.default.taskList('Start Mongo');\n\n  list.executeScript('Start Mongo', {\n    script: (0, _utils.resolvePath)(__dirname, 'assets/mongo-start.sh'),\n    vars: {\n      mongoVersion: config.version || '3.4.1'\n    }\n  });\n\n  var sessions = api.getSessions(['mongo']);\n  return (0, _utils.runTaskList)(list, sessions, { verbose: api.getVerbose() });\n}\n\nfunction stop(api) {\n  log('exec => mup mongo stop');\n  var list = _nodemiral2.default.taskList('Stop Mongo');\n\n  list.executeScript('stop mongo', {\n    script: (0, _utils.resolvePath)(__dirname, 'assets/mongo-stop.sh')\n  });\n\n  var sessions = api.getSessions(['mongo']);\n  return (0, _utils.runTaskList)(list, sessions, { verbose: api.getVerbose() });\n}","/home/travis/build/npmtest/node-npmtest-mup/node_modules/mup/lib/modules/proxy/index.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.help = help;\nexports.setup = setup;\n\nvar _debug = require('debug');\n\nvar _debug2 = _interopRequireDefault(_debug);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar log = (0, _debug2.default)('mup:module:proxy');\n\nfunction help() /* api */{\n  log('exec => mup proxy help');\n}\n\nfunction setup() /* api */{\n  log('exec => mup proxy setup');\n}","/home/travis/build/npmtest/node-npmtest-mup/node_modules/mup/lib/custom-errors.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Use this when a message was already shown to the user\n * and the error shouldn't be.\n * @export\n * @class HiddenError\n */\nvar HiddenError = exports.HiddenError = function HiddenError() {\n  _classCallCheck(this, HiddenError);\n};","/home/travis/build/npmtest/node-npmtest-mup/node_modules/mup/lib/errors.js":"\"use strict\";","/home/travis/build/npmtest/node-npmtest-mup/node_modules/mup/lib/modules/default/commands.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.commands = commands;\n\nvar _index = require('./index');\n\nvar commandFunctions = _interopRequireWildcard(_index);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction commands(parser) {\n  return parser.command('init', 'Setup files for new mup project', {}, commandFunctions.init).command('deploy', 'Deploy app to servers', function (yargs) {\n    return yargs.option('cached-build', {\n      description: 'Use build from previous deploy',\n      boolean: true\n    });\n  }, commandFunctions.deploy).command('logs', \"Show app's logs. Supports options from docker logs\", function (yargs) {\n    return yargs.strict(false).option('tail', {\n      description: 'Number of lines to show from the end of the logs',\n      number: true,\n      default: 'all'\n    }).option('follow', {\n      description: 'Follow log output',\n      alias: 'f',\n      boolean: true\n    });\n  }, commandFunctions.logs).command('reconfig', 'Updates server env and start script to match config', {}, commandFunctions.reconfig).command('restart', 'Restart apps', {}, commandFunctions.restart).command('setup', 'Install depedencies on server, setups custom certificates and mongodb to match config', {}, commandFunctions.setup).command('start', 'Start app', {}, commandFunctions.start).command('stop', 'Stop app', {}, commandFunctions.stop);\n}"}